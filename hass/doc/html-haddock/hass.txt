-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Command line password manager written in Haskell. Written to be close
--   to a copy of <b>pass</b>.
--   
--   <b>hass</b> is a very simple password store that keeps passwords
--   inside AES-256 encrypted files inside a simple directory tree residing
--   at <i>~/.hass</i>. The <b>hass</b> utility provides a series of
--   commands for manipulating the password store, allowing the user to
--   add, remove, edit, synchronize, generate, and manipulate passwords.
--   
--   Several of the commands below rely on or provide additional
--   functionality if the password store directory is also a git
--   repository. If the password store directory is a git repository, all
--   password store modification commands will cause a corresponding git
--   commit.
--   
--   The <tt>init</tt> command must be run before other commands in order
--   to initialize the password store. You can read the more detailed
--   description of the encryption system used in module <a>Crypto</a>.
@package hass
@version 0.9.9.0


-- | A simple dedicated daemon used to efficiently manage
--   password-to-clipboard selections. After start it waits a number of
--   seconds (45 by default) and simply sets the clipboard to an empty
--   string.
module Daemon

-- | Copy a string to the clipboard, starting a daemon on the way to ensure
--   the selection gets erased after a certain delay.
setClipboardAndDaemonize :: String -> IO ()

-- | To be used before setting the clipboard when <b>hass</b> is invoked
--   with <tt>--clip</tt>.
daemonAliveAtClip :: IO ()

-- | Start our daemon.
startDaemon :: IO ()


-- | <i>Types</i> module contains all self-defined data types and
--   instances, default representations for records, some type synonyms and
--   lenses. This makes this module necessary to be imported by almost all
--   other <b>hass</b> modules.
module Types

-- | Data type for parsing command line flags.
data Option
Reencrypt :: Option
Path :: Option
Clip :: Option
Echo :: Option
NoSymbols :: Option
InPlace :: Option
MultiLine :: Option
Force :: Option
Recursive :: Option
Help :: Option

-- | Data type for ternary choices - action on directories in
--   <tt>traverseStore</tt> in this case.
data AoD
No :: AoD
Before :: AoD
After :: AoD

-- | Used to check if <a>aod</a> is <a>Before</a>.
before :: AoD -> Bool

-- | Used to check if <a>aod</a> is <a>After</a>.
after :: AoD -> Bool

-- | Record used for efficient passing of arguments to
--   <tt>actionOnNonExistingPasses</tt> and <tt>actionOnExistingPasses</tt>
--   functions.
data ActionReqs
ActionReqs :: String -> FilePath -> Integer -> CryptReqs -> ActionReqs

-- | Which action to execute?
[_entity] :: ActionReqs -> String

-- | Destination file path needed by mv and cp
[_dest] :: ActionReqs -> FilePath

-- | Password length needed by actionGenerate
[_passlength] :: ActionReqs -> Integer

-- | Attributes needed by encrypt-decrypt logic
[_cr] :: ActionReqs -> CryptReqs

-- | Default configuration of <a>ActionReqs</a>.
defAR :: ActionReqs

-- | Record used for efficient passing of arguments to
--   <tt>traverseStore</tt> function. If <a>onCrypt</a> is specified,
--   <tt>traverseStore</tt> will skip the subfolders which have their own
--   checkfiles.
data TraverseReqs
TraverseReqs :: AoD -> Bool -> Bool -> FilePath -> FilePath -> Integer -> (TraverseReqs -> FilePath -> IO ()) -> String -> CryptReqs -> CryptReqs -> TraverseReqs

-- | Execute the action on directory entries?
[_aod] :: TraverseReqs -> AoD

-- | Execute the action on checkfile entries?
[_aocf] :: TraverseReqs -> Bool

-- | Does the action involve crypto shenanigans?
[_onCrypt] :: TraverseReqs -> Bool

-- | Current directory to pass to actions (will virtually change during
--   <tt>traverseStore</tt> run)
[_cdir] :: TraverseReqs -> FilePath

-- | Target directory to pass to actions (will virtually change during
--   <tt>traverseStore</tt> run)
[_target] :: TraverseReqs -> FilePath

-- | Depth of recursion
[_depth] :: TraverseReqs -> Integer

-- | Action to be executed
[_act] :: TraverseReqs -> TraverseReqs -> FilePath -> IO ()

-- | An additional string, can be used e.g. in grep or find actions
[_string] :: TraverseReqs -> String

-- | Old master password
[_oldCR] :: TraverseReqs -> CryptReqs

-- | New master password
[_newCR] :: TraverseReqs -> CryptReqs

-- | Default configuration of <a>TraverseReqs</a>.
defTR :: TraverseReqs

-- | Record used for efficient passing of arguments to encrypt-decrypt
--   functions.
data CryptReqs
CryptReqs :: ByteString -> ByteString -> CryptReqs
[_mp] :: CryptReqs -> ByteString
[_iv] :: CryptReqs -> ByteString

-- | Default implementation of <a>CryptReqs</a>.
defCR :: CryptReqs

-- | Type synonym for better readability.
type TraverseFunction = TraverseReqs -> FilePath -> IO ()

-- | A simple monad transformer.
newtype MaybeT m a
MaybeT :: m (Maybe a) -> MaybeT m a
[runMaybeT] :: MaybeT m a -> m (Maybe a)
mp :: ArrowApply cat => Lens cat CryptReqs ByteString
iv :: ArrowApply cat => Lens cat CryptReqs ByteString
passlength :: ArrowApply cat => Lens cat ActionReqs Integer
entity :: ArrowApply cat => Lens cat ActionReqs String
dest :: ArrowApply cat => Lens cat ActionReqs FilePath
cr :: ArrowApply cat => Lens cat ActionReqs CryptReqs
target :: ArrowApply cat => Lens cat TraverseReqs FilePath
string :: ArrowApply cat => Lens cat TraverseReqs String
onCrypt :: ArrowApply cat => Lens cat TraverseReqs Bool
oldCR :: ArrowApply cat => Lens cat TraverseReqs CryptReqs
newCR :: ArrowApply cat => Lens cat TraverseReqs CryptReqs
depth :: ArrowApply cat => Lens cat TraverseReqs Integer
cdir :: ArrowApply cat => Lens cat TraverseReqs FilePath
aod :: ArrowApply cat => Lens cat TraverseReqs AoD
aocf :: ArrowApply cat => Lens cat TraverseReqs Bool
act :: ArrowApply cat => Lens cat TraverseReqs (TraverseReqs -> FilePath -> IO ())
instance GHC.Enum.Bounded Types.AoD
instance GHC.Enum.Enum Types.AoD
instance GHC.Show.Show Types.AoD
instance GHC.Classes.Ord Types.AoD
instance GHC.Classes.Eq Types.AoD
instance GHC.Show.Show Types.Option
instance GHC.Classes.Ord Types.Option
instance GHC.Classes.Eq Types.Option
instance GHC.Base.Functor m => GHC.Base.Functor (Types.MaybeT m)
instance (GHC.Base.Functor m, GHC.Base.Monad m) => GHC.Base.Applicative (Types.MaybeT m)
instance (GHC.Base.Functor m, GHC.Base.Monad m) => GHC.Base.Alternative (Types.MaybeT m)
instance GHC.Base.Monad m => GHC.Base.Monad (Types.MaybeT m)
instance Control.Monad.Trans.Class.MonadTrans Types.MaybeT
instance GHC.Base.Monad m => GHC.Base.MonadPlus (Types.MaybeT m)


-- | This module contains functionality to parse command line arguments
--   with which <b>hass</b> was invoked. All options that can't be needed
--   by the first command are stripped.
module Options

-- | Extract commands from command line.
commands :: IO [String]

-- | Extract flags from command line.
args :: IO [Option]

-- | Checks if a flag was passed to <b>hass</b> via command line.
inArgs :: Option -> IO Bool

-- | Print usage to <i>stderr</i> stream.
putUsage :: IO ()

-- | A string describing commands available and pattern for invoking
--   <b>hass</b>.
usage :: String

-- | Returns a string showing usage pattern and available flags for a
--   particular command.
commandUsage :: String -> String


-- | Utility functions to be used in other <b>hass</b> modules.
module UtilFunctions

-- | Output an error message to <i>stderr</i> stream and exit with exit
--   code 1. Should be used only at user-interaction level (such as
--   prompting for master password), not instead of exceptions.
die :: String -> IO ()

-- | The equivalent of <a>getLine</a> for <a>ByteString</a>s.
getByteLine :: IO ByteString

-- | Sets clipboard, starting a daemon to wait 45 seconds and then erase
--   the clipboard.
toClipboard :: ByteString -> IO ()

-- | The <b>hass</b> directory containing password storages.
hassDir :: IO FilePath

-- | Exports path to concrete password file or directory.
passPath :: String -> IO FilePath

-- | Extract only the part of the path relative to <b>hass</b> password
--   storage directory. Does not resolve special entries like <tt>..</tt>.
makeRelativeToHass :: FilePath -> IO FilePath

-- | Checks if a sneaky path was entered, such as containing <tt>..</tt>.
checkSneakyPaths :: FilePath -> Bool

-- | List directory entries, skipping dot files. To be used in listing
--   action.
listDirectory :: FilePath -> IO [FilePath]

-- | List all directory entries except <tt>.</tt>, <tt>..</tt> and
--   <tt>.check</tt>. To be used during removal to correctly check if the
--   directory is empty of needed files.
listRemovingDirectory :: FilePath -> IO [FilePath]

-- | Creates path to storage directory, creating missing parents
--   directories on demand.
createStorageDir :: String -> IO ()

-- | Creates directories in a path to a file, extracting everything prior
--   to the last slash.
createPath :: FilePath -> IO ()

-- | Traverse a directory, recursively executing the passed action on each
--   entry. Executes the action on each directory entry, too, if anything
--   other that <a>No</a> is passed as <a>aod</a> field in
--   <a>TraverseReqs</a>.
traverseStore :: TraverseReqs -> FilePath -> IO ()

-- | Prompt for confirmation in the event of trying to overwriting a
--   target.
prompt :: FilePath -> IO Bool

-- | Parse confirmation request. Takes a default value and a string to be
--   parsed. "y", "yes", "Y" are recognised as confirmative answers, "n",
--   "no", "N" as negative, empty line and unrecognised options will be
--   defaulted.
parseConfirmationRequest :: Bool -> String -> Bool

-- | Set echoing <i>stdin</i>, execute an action and then restore the echo
--   setting to the old value. Restores the old value in case of an
--   exception during action's execution.
withEcho :: Bool -> IO a -> IO a

-- | Execute an action using temporary file. Tries writing to
--   <i>/dev/shm</i> in order to avoid writing to difficult-to-erase disk
--   sectors. Falls back to default <tt>$TMPDIR</tt> or <i>/tmp</i> if that
--   variable isn't set and asks for confirmation.
withTempFile :: (FilePath -> Handle -> IO a) -> IO a

-- | Change the working directory and restore it afterwards, even if the
--   given action fails due to an exception.
withDirectory :: FilePath -> IO a -> IO a

-- | If-function to avoid using the built-in <tt>if-then-else</tt>
--   construct.
(?) :: Bool -> a -> a -> a

-- | If-function with boolean argument passed last. To be used in monad
--   bindings.
ifOn :: a -> a -> Bool -> a

-- | If-function operating on monadic values.
ifM :: Monad m => m Bool -> m a -> m a -> m a

-- | <a>when</a>-function operating on monadic values.
whenM :: Monad m => m Bool -> m () -> m ()

-- | The same as <a>maybe</a>, but with "on Just" option passed last as to
--   increase readability.
(?..) :: Maybe a -> b -> (a -> b) -> b


-- | This symmetric cryptosystem works as follows:
--   
--   <ol>
--   <li>AES-256 is used as a specification of choice.</li>
--   <li>Initialisation vector (IV) is generated randomly for each
--   encryption.</li>
--   <li>AES key is made by taking a SHA-256 hash of the provided master
--   password.</li>
--   <li>A checkfile is created upon initialising a password storage
--   directory. This checkfile contains 16 bytes of pre-defined noise
--   (dummy values) which are encrypted using our AES key and a newly
--   generated IV.</li>
--   <li>Checking if the master password is correct consists
--   of<ul><li>decrypting the checkfile with master password's AES
--   key</li><li>comparing the result with dummy values.</li></ul></li>
--   </ol>
--   
--   The check is passed if the comparison yield equalness of both values.
module Crypto

-- | Checks if the master password entered by user is correct.
checkMasterPass :: FilePath -> ByteString -> IO Bool

-- | Tries to find the "nearest" checkfile by sequentially going up a
--   directory until <b>hass</b> core directory is reached.
--   
--   Returns a wrapped <a>Nothing</a> if no checkfile was found, or a
--   wrapped <a>Just</a> <a>FilePath</a> in case of a success.
checkFileExists :: FilePath -> MaybeT IO FilePath

-- | Check if the directory is already initialised as a storage and, if
--   not, create a checkfile.
createStorage :: FilePath -> IO ()

-- | Create a checkfile in the specified directory using provided master
--   password.
createCheckFile :: FilePath -> ByteString -> IO ()

-- | Prompt for confirmation on entering empty master password and parse
--   (<a>parseConfirmationRequest</a>) it. Defaulting to negative.
onEmptyMP :: IO Bool

-- | Reencrypt a <tt>ByteString</tt> by decrypting it with old and
--   encrypting with new data.
reencrypt :: TraverseReqs -> ByteString -> ByteString

-- | Encrypt a <tt>ByteString</tt>.
encrypt :: CryptReqs -> ByteString -> ByteString

-- | Decrypt a <tt>ByteString</tt>.
decrypt :: CryptReqs -> ByteString -> ByteString


-- | Helper functions to be used with <tt>hass</tt> git command.
--   
--   Currently git repository is initialised in core directory and it
--   follows that only the whole store can be tracked.
module Git

-- | Return path to <tt>.git</tt> directory in <b>hass</b> storage
--   directory.
gitDir :: IO String

-- | If <tt>git init</tt> is run, add all password files to the repository
--   in an initial commit.
gitInit :: [String] -> IO ()

-- | Add a file/directory's contents to the repository and tree.
gitAdd :: FilePath -> IO ()

-- | Remove a file/directory's contents from the repository and tree.
gitRm :: FilePath -> IO ()

-- | Make a commit to the password-storage repository.
gitCommit :: String -> IO ()

-- | Combines <tt>git-add</tt> and <tt>git-commit</tt> to simplify tracking
--   new or edited password files.
gitTrackNewPassword :: FilePath -> String -> IO ()

-- | Is password storage directory a git repository?
isGitRepo :: IO Bool

-- | Call git process with passed arguments
callGit :: [String] -> IO ()


-- | Helper functions to be used in the main module.
module Helpers

-- | Call pwgen and read the resulting generated password. Correctly passes
--   <tt>--no-symbols</tt> flag.
runPwgen :: Integer -> Bool -> IO ByteString

-- | Reencrypt entry. To be used with <a>traverseStore</a> function when
--   <b>hass</b> is invoked with <tt>init --reencrypt</tt>.
reencryptEntry :: TraverseFunction

-- | Copy file of directory to the location specified in
--   <a>TraverseReqs</a>. To be used with <a>traverseStore</a> function
--   when <b>hass</b> is invoked with <tt>cp</tt> or <tt>mv</tt>.
copyEntry :: TraverseFunction

-- | Remove file or directory. To be used with <a>traverseStore</a>
--   function when <b>hass</b> is invoked with <tt>rm</tt>.
removeEntry :: TraverseFunction

-- | Pretty print entry name. To be used with <a>traverseStore</a> function
--   when <b>hass</b> is invoked with <tt>list</tt>.
printEntryName :: TraverseFunction

-- | Apply a filter passed as string within TraverseReqs to the entry name
--   before printing it. To be used with <a>traverseStore</a> function when
--   <b>hass</b> is invoked with <tt>find</tt>.
printWith :: TraverseFunction

-- | Decrypt a password, grep inside it for search string, and display the
--   line containing matched string along with filename. To be used with
--   <a>traverseStore</a> function when <b>hass</b> is invoked with
--   <tt>grep</tt>.
grepInPass :: TraverseFunction

-- | Asks for a password to be inserted, asking to reconfirm unless
--   <tt>--echo</tt> OR <tt>--multiline</tt> has been passed, and writes it
--   to the corresponding file. If <b>hass</b> was invoked with
--   <tt>--multiline</tt> flag, waits for <tt>Ctrl+D</tt> to stop reading
--   the input.
actionInsert :: FilePath -> CryptReqs -> IO ()

-- | Generates a password of given length using <a>runPwgen</a>. The
--   function then writes the encrypted result to the corresponding file
--   (possibly only replacing the first line if <tt>--in-place</tt> was
--   specified) and either outputs it to stdout stream, or copies it to the
--   clipboard if <tt>--clip</tt> was passed.
actionGenerate :: FilePath -> Integer -> CryptReqs -> IO ()

-- | Calls the editor of choice of the system, looking up the
--   <tt>$EDITOR</tt> environment variable. Falls back to <tt>vi</tt> as it
--   should be pre-installed on every Linux machine. Calls <tt>shred</tt>
--   on the temporary file when the editing is done.
actionEdit :: FilePath -> CryptReqs -> IO ()

-- | Either outputs the decrypted password to <i>stdout</i> stream, or
--   copies it to the clipboard if <tt>--clip</tt> was passed.
actionShow :: FilePath -> CryptReqs -> IO ()

-- | Removes the password file/directory after asking for confirmation
--   defaulting to negative unless <tt>--force</tt> was specified. Does not
--   remove non-empty directories unless invoked with <tt>--recursive</tt>
--   flag. Directory is considered empty if it contains nothing but
--   possibly a <tt>.check</tt> file.
actionRemove :: FilePath -> IO ()

-- | Copies the password file/directory to the specified folder.
--   Confirmation for overwriting existing targets defaults to negative and
--   occurs unless <tt>--force</tt> was specified. After copy execution
--   selectively reencrypts copied files after asking for the most suitable
--   master password.
actionCopy :: FilePath -> FilePath -> Bool -> CryptReqs -> IO ()

-- | Calls git with arguments specified in the command line upon
--   invokation.
actionGit :: [String] -> IO ()
